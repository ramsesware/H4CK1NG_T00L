# Copyright (C) 2024 Moisés Ceñera Fernández
# This file is part of H4CK1NG_T00L.
# 
# H4CK1NG_T00L is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# H4CK1NG_T00L is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with H4CK1NG_T00L. If not, see <https://www.gnu.org/licenses/>.

from tkinter import messagebox
import tkinter as tk
import nmap
import threading

def scan_vulnerability(ip_address, result_text):
    scan_thread = threading.Thread(target=run_scan, args=(ip_address, result_text))
    scan_thread.start()

def run_scan(ip_address, result_text):
        vulnerability_scanner = nmap.PortScanner()
        if not ip_address:
            result_text.insert(tk.END, "Incorrect IP Address.\n")
            return

        result_text.delete(1.0, tk.END)  # Limpiar resultados anteriores
        result_text.insert(tk.END, f"Scanning IP {ip_address}...\n")
        
        options = "-p 0-10000 --open -sS --min-rate=500 -T3 -Pn"
        vulnerability_scanner.scan(ip_address, arguments=options)
        
        
        for host in vulnerability_scanner.all_hosts():
            result_text.insert(tk.END, f"Host: {host}\n")
            result_text.insert(tk.END, f"State: {vulnerability_scanner[host].state()}\n")
            for protocol in vulnerability_scanner[host].all_protocols():
                result_text.insert(tk.END, f"Protocol: {protocol.upper()}\n")
                ports = vulnerability_scanner[host][protocol].keys()
                for port in ports:
                    if vulnerability_scanner[host][protocol][port]['name'] != "":
                        result_text.insert(tk.END, f"  Port: {port} - {vulnerability_scanner[host][protocol][port]['name']} - {vulnerability_scanner[host][protocol][port]['state']}\n")
                    else:
                        result_text.insert(tk.END, f"  Port: {port} - {vulnerability_scanner[host][protocol][port]['state']}\n")
                    for option in vulnerability_scanner[host][protocol][port]:
                        if vulnerability_scanner[host][protocol][port][option] != "" and option not in ("name","state","reason","conf"):
                            result_text.insert(tk.END, f"    - {option}: {vulnerability_scanner[host][protocol][port][option]}\n")
                    result_text.insert(tk.END, f"\n")


def clear_results_vulnerability(result_text):
    result_text.delete("1.0", tk.END)
    messagebox.showinfo("Results cleared", "Text area have been cleared.")
