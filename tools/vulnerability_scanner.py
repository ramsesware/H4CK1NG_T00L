from tkinter import messagebox
import tkinter as tk
import nmap
import socket
import threading

def scan_vulnerability(ip_address, result_text, progress_bar):
    scan_thread = threading.Thread(target=run_scan, args=(ip_address, result_text, progress_bar))
    scan_thread.start()

def run_scan(ip_address, result_text, progress_bar):
        vulnerability_scanner = nmap.PortScanner()
        if not ip_address:
            result_text.insert(tk.END, "Incorrect IP Address.\n")
            return

        result_text.delete(1.0, tk.END)  # Limpiar resultados anteriores
        result_text.insert(tk.END, f"Scanning IP {ip_address}...\n")
        
        options = "-p 0-10000 --open -sS --min-rate=500 -T3 -Pn"
        vulnerability_scanner.scan(ip_address, arguments=options)
        
        for host in vulnerability_scanner.all_hosts():
            result_text.insert(tk.END, f"Host: {host}\n")
            result_text.insert(tk.END, f"State: {vulnerability_scanner[host].state()}\n")

            total_ports = sum(len(vulnerability_scanner[host][protocol].keys()) for protocol in vulnerability_scanner[host].all_protocols())
            progress_bar["value"] = 0
            progress_bar["maximum"] = total_ports
            for protocol in vulnerability_scanner[host].all_protocols():
                
                result_text.insert(tk.END, f"Protocol: {protocol.upper()}\n")
                ports = vulnerability_scanner[host][protocol].keys()
                print(ports)
                for port in ports:
                    port_info = vulnerability_scanner[host][protocol][port]
                    if port_info['name'] != "":
                        result_text.insert(tk.END, f"  Port: {port} - {vulnerability_scanner[host][protocol][port]['name']} - {vulnerability_scanner[host][protocol][port]['state']}\n")
                    else:
                        result_text.insert(tk.END, f"  Port: {port} - {vulnerability_scanner[host][protocol][port]['state']}\n")
                    for option in port_info:
                        if port_info[option] != "" and option not in ("name","state","reason","conf"):
                            result_text.insert(tk.END, f"    - {option}: {vulnerability_scanner[host][protocol][port][option]}\n")
                    banner = grab_banner(ip_address, port)
                    if banner:
                        result_text.insert(tk.END, f"Banner: {banner}\n")
                    result_text.insert(tk.END, f"\n")

                    progress_bar["value"] += 1
                    progress_bar.update_idletasks()

        result_text.insert(tk.END, "Scan completed.\n")
        progress_bar["value"] = progress_bar["maximum"]




def grab_banner(ip, port):

    try:
       
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)  
        sock.connect((ip, port))
        banner = sock.recv(1024).decode().strip()
        sock.close()
        return banner
    except Exception as e:
        return None

def clear_results_vulnerability(result_text):
    result_text.delete("1.0", tk.END)
    messagebox.showinfo("Results cleared", "Text area have been cleared.")
